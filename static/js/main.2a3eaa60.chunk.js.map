{"version":3,"sources":["components/AccountBalance.js","components/Home.js","components/UserProfile.js","components/Login.js","components/Debits.js","components/Credits.js","App.js","serviceWorker.js","index.js"],"names":["AccountBalance","this","props","Component","Home","className","src","alt","to","accountBalance","UserProfile","userName","memberSince","LogIn","handleChange","e","updatedUser","state","user","inputField","target","name","inputValue","value","setState","handleSubmit","preventDefault","mockLogIn","redirect","password","onSubmit","htmlFor","type","onChange","Debits","newDebit","description","amount","Number","date","Date","toISOString","newDebitArray","debits","result","forEach","debit","total","toFixed","totalDebit","bind","axios","get","then","response","data","console","log","display","map","min","step","required","Credits","newCredit","newCreditArray","credits","credit","totalCredit","App","logInInfo","newUser","currentUser","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2a3eaa60.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass AccountBalance extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>Balance: {this.props.AccountBalance} </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AccountBalance;","import React, {Component} from 'react';\r\nimport AccountBalance from './AccountBalance';\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass Home extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <img src=\"https://img.etimg.com/thumb/msid-71487585,width-300,imgsize-169788,resizemode-4/bank-getty.jpg\" \r\n                alt=\"bank\" />\r\n                <h1>Bank of React</h1>\r\n                \r\n                <Link to=\"/login\">Login</Link>{\" \"}\r\n                <Link to=\"/userProfile\">User Profile</Link>{\" \"}\r\n                <Link to=\"/debits\">Debits</Link>{\" \"}\r\n                <Link to=\"/credits\">Credits</Link>{\" \"}\r\n\r\n                <AccountBalance accountBalance={this.props.accountBalance}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React, {Component} from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass UserProfile extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n            <h1>User Profile</h1>\r\n            \r\n            <Link to=\"/\">Home</Link>\r\n            <br /><br />\r\n\r\n            <div>Username: {this.props.userName}</div>\r\n            <div>Member Since: {this.props.memberSince}</div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UserProfile;","import React, {Component} from 'react';\r\nimport {Redirect} from'react-router-dom';\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass LogIn extends Component {\r\n    constructor () {\r\n        super();\r\n        this.state = {\r\n            user: {\r\n                userName: '',\r\n                password: ''\r\n            },\r\n            redirect: false\r\n        }\r\n    }\r\n    \r\n    handleChange = (e) => {\r\n        const updatedUser = {...this.state.user}\r\n        const inputField = e.target.name\r\n        const inputValue = e.target.value\r\n        updatedUser[inputField] = inputValue\r\n        this.setState({user: updatedUser})\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        this.props.mockLogIn(this.state.user)\r\n        this.setState({redirect: true})\r\n    }\r\n\r\n    render() {\r\n        if (this.state.redirect) {\r\n            return (<Redirect to= \"/UserProfile\" />)\r\n        }\r\n        \r\n        return (\r\n            <div className=\"App\">\r\n            <h1>Login</h1>\r\n            <Link to=\"/\">Home</Link>\r\n            <br /><br />\r\n            <div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <div>\r\n                        <label htmlFor=\"userName\">User Name: </label>\r\n                        <input type=\"text\" name=\"userName\" onChange={this.handleChange} value={this.state.user.userName} />\r\n                    </div>\r\n                    <div>\r\n                        <label htmlFor=\"password\">Password: </label>\r\n                        <input type=\"password\" name=\"password\" />\r\n                    </div>\r\n                    <button>Login</button>\r\n                </form>\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LogIn","import React, {Component} from 'react';\r\nimport axios from 'axios';\r\nimport {Link} from 'react-router-dom';\r\nimport AccountBalance from './AccountBalance';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Debits extends Component {\r\n    constructor () {\r\n        super();\r\n        this.state = {\r\n            debits: [],\r\n            totalDebit: 0,\r\n            description: \"\",\r\n            amount: 0,\r\n            date: \"\"\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios\r\n        .get(\"https://moj-api.herokuapp.com/debits\")\r\n        .then((response) => {\r\n            const data = response.data;\r\n            console.log(data);\r\n            this.setState({debits: data});\r\n            let total = 0;\r\n            data.forEach((debit) => (total += debit.amount));\r\n            this.setState({totalDebit: total})\r\n        })\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        let newDebit = {\r\n            description: this.state.description,\r\n            amount: Number(this.state.amount),\r\n            date: new Date().toISOString()\r\n        }\r\n        let newDebitArray = [...this.state.debits, newDebit];\r\n        this.setState({debits: newDebitArray});\r\n        let result = 0;\r\n        newDebitArray.forEach((debit) => (result += debit.amount));\r\n        let total = result.toFixed(2);\r\n        this.setState({totalDebit: total});\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({[e.target.name]: e.target.value});\r\n    }\r\n\r\n    render() {\r\n        let display = (\r\n            this.state.debits.map((debit) => {\r\n                return (\r\n                <>\r\n                <div>Description: {debit.description}</div>\r\n                <div>Amount: {debit.amount}</div>\r\n                <div>Date: {debit.date}</div>\r\n                <br />\r\n                </>\r\n                )\r\n            })\r\n        )\r\n        return (\r\n        <div className=\"App\">\r\n        <h1>Debits</h1>\r\n        <Link to=\"/\">Home</Link>\r\n        <br /><br />\r\n        <form onSubmit={this.handleSubmit}>\r\n            <label htmlFor=\"description\">Description: </label>\r\n            <input type=\"text\" \r\n                   name=\"description\"\r\n                   onChange={this.handleChange} />\r\n                   <br />\r\n            <label htmlFor=\"amount\">Amount: </label>\r\n            <input type=\"number\"\r\n                    min=\"0\"\r\n                    step=\"0.01\"\r\n                    required\r\n                    name=\"amount\"\r\n                   onChange={this.handleChange} />\r\n                   <br />\r\n            <button>Add Debit</button>\r\n        </form>\r\n        <br />\r\n        <AccountBalance />\r\n        <div>Total Debits: {this.state.totalDebit}</div>\r\n        <div>{display}</div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nDebits.propTypes = {\r\n    totalDebit: PropTypes.number,\r\n    description: PropTypes.string,\r\n    amount: PropTypes.number,\r\n    date: PropTypes.string\r\n};\r\n\r\nexport default Debits","import React, {Component} from 'react';\r\nimport axios from 'axios'\r\nimport {Link} from 'react-router-dom';\r\nimport AccountBalance from \"./AccountBalance\";\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Credits extends Component {\r\n    constructor () {\r\n        super();\r\n        this.state = {\r\n            credits: [],\r\n            totalCredit: 0,\r\n            description: \"\",\r\n            amount: 0,\r\n            date: \"\"\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios\r\n        .get(\"https://moj-api.herokuapp.com/credits\")\r\n        .then((response) => {\r\n            const data = response.data;\r\n            console.log(data);\r\n            this.setState({credits: data});\r\n            let total = 0;\r\n            data.forEach((credit) => (total += credit.amount));\r\n            this.setState({totalCredit: total});\r\n        })\r\n    }\r\n    \r\n    handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        let newCredit = {\r\n            description: this.state.description,\r\n            amount: Number(this.state.amount),\r\n            date: new Date().toISOString()\r\n        }\r\n        let newCreditArray = [...this.state.credits, newCredit];\r\n        this.setState({credits: newCreditArray});\r\n        let result = 0;\r\n        newCreditArray.forEach((credit) => (result += credit.amount));\r\n        let total = result.toFixed(2);\r\n        this.setState({totalCredit: total});\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({[e.target.name]: e.target.value});\r\n    }\r\n   \r\n    render() {\r\n        let display= (\r\n            this.state.credits.map((credit) => {\r\n                return (\r\n                <>\r\n                <div>Description: {credit.description}</div>\r\n                <div>Amount: {credit.amount}</div>\r\n                <div>Date: {credit.date}</div>\r\n                <br />\r\n                </>\r\n                )\r\n            })\r\n        )\r\n        return (\r\n            <div className=\"App\">\r\n            <h1>Credits</h1>\r\n            <Link to=\"/\">Home</Link>\r\n            <br /><br />\r\n            <form onSubmit={this.handleSubmit}>\r\n            <label htmlFor=\"description\">Description: </label>\r\n            <input type=\"text\" \r\n                   name=\"description\"\r\n                   onChange={this.handleChange} />\r\n                   <br />\r\n            <label htmlFor=\"amount\">Amount: </label>\r\n            <input type=\"number\"\r\n                    min=\"0\"\r\n                    step=\"0.01\"\r\n                    required\r\n                    name=\"amount\"\r\n                   onChange={this.handleChange} />\r\n                   <br />\r\n            <button>Add Credit</button>\r\n        </form>\r\n        <br />\r\n        <AccountBalance />\r\n        <div>Total Credit: {this.state.totalCredit}</div>\r\n        <div>{display}</div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\nCredits.propTypes = {\r\n    totalCredit: PropTypes.number,\r\n    description: PropTypes.string,\r\n    amount: PropTypes.number,\r\n    date: PropTypes.string\r\n};\r\n\r\nexport default Credits","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\r\nimport Home from './components/Home';\r\nimport UserProfile from './components/UserProfile';\r\nimport LogIn from './components/Login';\r\nimport Debits from './components/Debits';\r\nimport Credits from './components/Credits';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    \r\n    this.state = {\r\n      accountBalance: null,\r\n      currentUser: {\r\n        userName: 'bob_loblaw',\r\n        memberSince: '08/23/99',\r\n      },\r\n    }\r\n  }\r\n  \r\n  mockLogIn = (logInInfo) => {\r\n    const newUser = {...this.state.currentUser}\r\n    newUser.userName=logInInfo.userName\r\n    this.setState({currentUser:newUser})\r\n  }\r\n  render() {\r\n    const HomeComponent = () => (<Home accountBalance={this.state.accountBalance}/>);\r\n    const UserProfileComponent=() => (\r\n      <UserProfile userName={this.state.currentUser.userName} memberSince={this.state.currentUser.memberSince} />\r\n    );\r\n    const LogInComponent = () => (<LogIn user={this.state.currentUser} mockLogIn= {this.mockLogIn} {...this.props}/>)\r\n    return (\r\n      <Router>\r\n        <div>\r\n          <Route exact path=\"/bank-of-react\" render={HomeComponent}/>\r\n          <Route exact path=\"/userProfile\" render={UserProfileComponent} />\r\n          <Route exact path=\"/login\" render={LogInComponent} />\r\n          <Route exact path='/debits' component={Debits} />\r\n          <Route exact path='/credits' component={Credits} />\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}